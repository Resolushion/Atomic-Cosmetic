var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CardActions, styled } from '@mui/material';
import { Form, required, useLogin, useNotify, useTranslate } from 'ra-core';
import { Link, PasswordInput, SaveButton, TextInput } from 'ra-ui-materialui';
import * as React from 'react';
import { ForgotPasswordPage } from './ForgotPasswordPage';
/**
 * A component that renders a form to login to the application with an email and password.
 */
export var LoginForm = function (_a) {
    var disableForgotPassword = _a.disableForgotPassword, props = __rest(_a, ["disableForgotPassword"]);
    var login = useLogin();
    var notify = useNotify();
    var translate = useTranslate();
    var submit = function (values) {
        return login(values).catch(function (error) {
            notify(typeof error === 'string'
                ? error
                : typeof error === 'undefined' || !error.message
                    ? 'ra.auth.sign_in_error'
                    : error.message, {
                type: 'warning',
                messageArgs: {
                    _: typeof error === 'string'
                        ? error
                        : error && error.message
                            ? error.message
                            : undefined,
                },
            });
        });
    };
    return (React.createElement(Root, __assign({ onSubmit: submit }, props),
        React.createElement("div", { className: SupabaseLoginFormClasses.container },
            React.createElement("div", { className: SupabaseLoginFormClasses.input },
                React.createElement(TextInput, { autoFocus: true, source: "email", type: "email", label: translate('ra-supabase.auth.email', {
                        _: 'Email',
                    }), fullWidth: true, validate: required() })),
            React.createElement("div", null,
                React.createElement(PasswordInput, { source: "password", label: translate('ra.auth.password', {
                        _: 'Password',
                    }), autoComplete: "current-password", fullWidth: true, validate: required() }))),
        React.createElement(CardActions, { sx: { flexDirection: 'column', gap: 1 } },
            React.createElement(SaveButton, { variant: "contained", type: "submit", className: SupabaseLoginFormClasses.button, label: translate('ra.auth.sign_in'), icon: React.createElement(React.Fragment, null) }),
            !disableForgotPassword ? (React.createElement(Link, { to: ForgotPasswordPage.path, variant: "body2" }, translate('ra-supabase.auth.forgot_password', {
                _: 'Forgot password?',
            }))) : null)));
};
var PREFIX = 'RaSupabaseLoginForm';
var SupabaseLoginFormClasses = {
    container: "".concat(PREFIX, "-container"),
    input: "".concat(PREFIX, "-input"),
    button: "".concat(PREFIX, "-button"),
};
var Root = styled(Form, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function (_a) {
    var _b;
    var theme = _a.theme;
    return (_b = {},
        _b["& .".concat(SupabaseLoginFormClasses.container)] = {
            padding: '0 1em 1em 1em',
        },
        _b["& .".concat(SupabaseLoginFormClasses.input)] = {
            marginTop: '1em',
        },
        _b["& .".concat(SupabaseLoginFormClasses.button)] = {
            width: '100%',
        },
        _b);
});
