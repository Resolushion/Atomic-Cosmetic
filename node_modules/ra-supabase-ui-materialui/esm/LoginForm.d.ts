import * as React from 'react';
import { ComponentProps } from 'react';
/**
 * A component that renders a form to login to the application with an email and password.
 */
export declare const LoginForm: ({ disableForgotPassword, ...props }: LoginFormProps) => JSX.Element;
export interface LoginFormProps extends Omit<ComponentProps<typeof Root>, 'onSubmit' | 'children'> {
    disableForgotPassword?: boolean;
}
declare const Root: import("@emotion/styled").StyledComponent<Pick<import("ra-core").FormOwnProps<unknown> & Omit<Partial<{
    mode: "onBlur" | "onChange" | "onSubmit" | "all" | "onTouched";
    disabled: boolean;
    reValidateMode: "onBlur" | "onChange" | "onSubmit";
    defaultValues: ((payload?: unknown) => Promise<import("react-hook-form").FieldValues>) | {
        [x: string]: any;
    };
    values: import("react-hook-form").FieldValues;
    errors: import("react-hook-form").FieldErrors<import("react-hook-form").FieldValues>;
    resetOptions: Partial<{
        keepDirtyValues: boolean;
        keepErrors: boolean;
        keepDirty: boolean;
        keepValues: boolean;
        keepDefaultValues: boolean;
        keepIsSubmitted: boolean;
        keepIsSubmitSuccessful: boolean;
        keepTouched: boolean;
        keepIsValidating: boolean;
        keepIsValid: boolean;
        keepSubmitCount: boolean;
    }> | undefined;
    resolver: import("react-hook-form").Resolver<import("react-hook-form").FieldValues, any>;
    context: any;
    shouldFocusError: boolean;
    shouldUnregister: boolean;
    shouldUseNativeValidation: boolean;
    progressive: boolean;
    criteriaMode: import("react-hook-form").CriteriaMode;
    delayError: number;
}>, "onSubmit"> & {
    validate?: import("ra-core").ValidateForm | undefined;
    noValidate?: boolean | undefined;
    WarnWhenUnsavedChangesComponent?: React.ComponentType<{
        enable?: boolean | undefined;
        formRootPathName?: string | undefined;
        formControl?: any;
    }> | undefined;
}, "mode" | "values" | "disabled" | "noValidate" | "reValidateMode" | "errors" | "resetOptions" | "resolver" | "context" | "shouldFocusError" | "shouldUnregister" | "shouldUseNativeValidation" | "progressive" | "criteriaMode" | "delayError" | "validate" | keyof import("ra-core").FormOwnProps<unknown> | "WarnWhenUnsavedChangesComponent"> & import("@mui/system").MUIStyledCommonProps<import("@mui/material").Theme>, {}, {}>;
export {};
//# sourceMappingURL=LoginForm.d.ts.map