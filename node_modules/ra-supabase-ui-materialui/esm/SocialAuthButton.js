var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Button } from '@mui/material';
import { useLogin, useNotify, useTranslate } from 'ra-core';
import { AppleIcon, AzureIcon, BitbucketIcon, DiscordIcon, FacebookIcon, GithubIcon, GitlabIcon, GoogleIcon, KeycloakIcon, LinkedinIcon, NotionIcon, SlackIcon, SpotifyIcon, TwitchIcon, TwitterIcon, WorkosIcon, } from './icons';
export var SocialAuthButton = function (_a) {
    var provider = _a.provider, redirectTo = _a.redirect, props = __rest(_a, ["provider", "redirect"]);
    var login = useLogin();
    var notify = useNotify();
    var handleClick = function () {
        login({ provider: provider }, redirectTo !== null && redirectTo !== void 0 ? redirectTo : window.location.toString()).catch(function (error) {
            // The authProvide always reject for OAuth login but there will be no error
            // if the call actually succeeds. This is to avoid react-admin redirecting
            // immediately to the provided redirect prop before users are redirected to
            // the OAuth provider.
            if (error) {
                notify(error.message, { type: 'error' });
            }
        });
    };
    return (React.createElement(Button, __assign({ onClick: handleClick, variant: "contained", size: "medium", color: "inherit" }, props)));
};
export var AppleButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Apple',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(AppleIcon, null), provider: "apple" }, props), label));
};
export var AzureButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Azure',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(AzureIcon, null), provider: "azure" }, props), label));
};
export var BitbucketButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Bitbucket',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(BitbucketIcon, null), provider: "bitbucket" }, props), label));
};
export var DiscordButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Discord',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(DiscordIcon, null), provider: "discord" }, props), label));
};
export var FacebookButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Facebook',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(FacebookIcon, null), provider: "facebook" }, props), label));
};
export var GitlabButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Gitlab',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(GitlabIcon, null), provider: "gitlab" }, props), label));
};
export var GithubButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Github',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(GithubIcon, null), provider: "github" }, props), label));
};
export var GoogleButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Google',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(GoogleIcon, null), provider: "google" }, props), label));
};
export var KeycloakButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Keycloak',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(KeycloakIcon, null), provider: "keycloak" }, props), label));
};
export var LinkedInButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'LinkedIn',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(LinkedinIcon, null), provider: "linkedin" }, props), label));
};
export var NotionButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Notion',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(NotionIcon, null), provider: "notion" }, props), label));
};
export var SlackButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Slack',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(SlackIcon, null), provider: "slack" }, props), label));
};
export var SpotifyButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Spotify',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(SpotifyIcon, null), provider: "spotify" }, props), label));
};
export var TwitchButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Twitch',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(TwitchIcon, null), provider: "twitch" }, props), label));
};
export var TwitterButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'Twitter',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(TwitterIcon, null), provider: "twitter" }, props), label));
};
export var WorkosButton = function (props) {
    var translate = useTranslate();
    var label = translate('ra-supabase.auth.sign_in_with', {
        provider: 'WorkOS',
    });
    return (React.createElement(SocialAuthButton, __assign({ startIcon: React.createElement(WorkosIcon, null), provider: "workos" }, props), label));
};
