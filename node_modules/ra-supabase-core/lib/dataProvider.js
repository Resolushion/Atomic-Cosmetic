"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.supabaseHttpClient = exports.supabaseDataProvider = void 0;
var ra_core_1 = require("ra-core");
var ra_data_postgrest_1 = __importStar(require("@raphiniert/ra-data-postgrest"));
var supabase_js_1 = require("@supabase/supabase-js");
/**
 * A function that returns a dataProvider for Supabase.
 * @param instanceUrl The URL of the Supabase instance
 * @param apiKey The API key of the Supabase instance. Prefer the anonymous key.
 * @param supabaseClient The Supabase client
 * @param httpClient Optional - The httpClient to use. Defaults to a httpClient that handles the authentication.
 * @param defaultListOp Optional - The default list filter operator. Defaults to 'eq'.
 * @param primaryKeys Optional - The primary keys of the tables. Defaults to 'id'.
 * @param schema Optional - The custom schema to use. Defaults to none.
 * @returns A dataProvider for Supabase
 */
var supabaseDataProvider = function (_a) {
    var instanceUrl = _a.instanceUrl, apiKey = _a.apiKey, _b = _a.supabaseClient, supabaseClient = _b === void 0 ? (0, supabase_js_1.createClient)(instanceUrl, apiKey) : _b, _c = _a.httpClient, httpClient = _c === void 0 ? (0, exports.supabaseHttpClient)({ apiKey: apiKey, supabaseClient: supabaseClient }) : _c, _d = _a.defaultListOp, defaultListOp = _d === void 0 ? 'eq' : _d, _e = _a.primaryKeys, primaryKeys = _e === void 0 ? ra_data_postgrest_1.defaultPrimaryKeys : _e, _f = _a.schema, schema = _f === void 0 ? ra_data_postgrest_1.defaultSchema : _f, rest = __rest(_a, ["instanceUrl", "apiKey", "supabaseClient", "httpClient", "defaultListOp", "primaryKeys", "schema"]);
    var config = __assign({ apiUrl: "".concat(instanceUrl, "/rest/v1"), httpClient: httpClient, defaultListOp: defaultListOp, primaryKeys: primaryKeys, schema: schema }, rest);
    return (0, ra_data_postgrest_1.default)(config);
};
exports.supabaseDataProvider = supabaseDataProvider;
/**
 * A function that returns a httpClient for Supabase. It handles the authentication.
 * @param apiKey The API key of the Supabase instance. Prefer the anonymous key.
 * @param supabaseClient The Supabase client
 * @returns A httpClient for Supabase
 */
var supabaseHttpClient = function (_a) {
    var apiKey = _a.apiKey, supabaseClient = _a.supabaseClient;
    return function (url, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(void 0, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, supabaseClient.auth.getSession()];
                    case 1:
                        data = (_a.sent()).data;
                        if (!options.headers)
                            options.headers = new Headers({});
                        if (supabaseClient['headers']) {
                            Object.entries(supabaseClient['headers']).forEach(function (_a) {
                                var name = _a[0], value = _a[1];
                                return options.headers.set(name, value);
                            });
                        }
                        if (data.session) {
                            options.user = {
                                authenticated: true,
                                // This ensures that users are identified correctly and that RLS can be applied
                                token: "Bearer ".concat(data.session.access_token),
                            };
                        }
                        // Always send the apiKey even if there isn't a session
                        options.headers.set('apiKey', apiKey);
                        return [2 /*return*/, ra_core_1.fetchUtils.fetchJson(url, options)];
                }
            });
        });
    };
};
exports.supabaseHttpClient = supabaseHttpClient;
