import { DataProvider } from 'ra-core';
import { IDataProviderConfig } from '@raphiniert/ra-data-postgrest';
import type { SupabaseClient } from '@supabase/supabase-js';
/**
 * A function that returns a dataProvider for Supabase.
 * @param instanceUrl The URL of the Supabase instance
 * @param apiKey The API key of the Supabase instance. Prefer the anonymous key.
 * @param supabaseClient The Supabase client
 * @param httpClient Optional - The httpClient to use. Defaults to a httpClient that handles the authentication.
 * @param defaultListOp Optional - The default list filter operator. Defaults to 'eq'.
 * @param primaryKeys Optional - The primary keys of the tables. Defaults to 'id'.
 * @param schema Optional - The custom schema to use. Defaults to none.
 * @returns A dataProvider for Supabase
 */
export declare const supabaseDataProvider: ({ instanceUrl, apiKey, supabaseClient, httpClient, defaultListOp, primaryKeys, schema, ...rest }: {
    instanceUrl: string;
    apiKey: string;
    supabaseClient?: SupabaseClient<any, "public", any> | undefined;
} & Partial<Omit<IDataProviderConfig, "apiUrl">>) => DataProvider;
/**
 * A function that returns a httpClient for Supabase. It handles the authentication.
 * @param apiKey The API key of the Supabase instance. Prefer the anonymous key.
 * @param supabaseClient The Supabase client
 * @returns A httpClient for Supabase
 */
export declare const supabaseHttpClient: ({ apiKey, supabaseClient, }: {
    apiKey: string;
    supabaseClient: SupabaseClient;
}) => (url: string, options?: any) => Promise<{
    status: number;
    headers: Headers;
    body: string;
    json: any;
}>;
//# sourceMappingURL=dataProvider.d.ts.map