import { Provider, SupabaseClient, User } from '@supabase/supabase-js';
import { AuthProvider, UserIdentity } from 'ra-core';
export declare const supabaseAuthProvider: (client: SupabaseClient, { getIdentity, getPermissions, redirectTo }: SupabaseAuthProviderOptions) => SupabaseAuthProvider;
export type GetIdentity = (user: User) => Promise<UserIdentity>;
export type GetPermissions = (user: User) => Promise<any>;
export type SupabaseAuthProviderOptions = {
    getIdentity?: GetIdentity;
    getPermissions?: GetPermissions;
    redirectTo?: string;
};
type LoginWithEmailPasswordParams = {
    email: string;
    password: string;
};
type LoginWithOAuthParams = {
    provider: Provider;
};
type LoginWithMagicLink = {
    email: string;
};
export interface SupabaseAuthProvider extends AuthProvider {
    login: (params: LoginWithEmailPasswordParams | LoginWithMagicLink | LoginWithOAuthParams) => ReturnType<AuthProvider['login']>;
    setPassword: (params: SetPasswordParams) => Promise<void>;
    resetPassword: (params: ResetPasswordParams) => Promise<void>;
}
export type SetPasswordParams = {
    access_token: string;
    refresh_token: string;
    password: string;
};
export type ResetPasswordParams = {
    email: string;
    redirectTo?: string;
    captchaToken?: string;
};
export {};
//# sourceMappingURL=authProvider.d.ts.map