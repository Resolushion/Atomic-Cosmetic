var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { getSearchString } from './getSearchString';
export var supabaseAuthProvider = function (client, _a) {
    var getIdentity = _a.getIdentity, getPermissions = _a.getPermissions, redirectTo = _a.redirectTo;
    var authProvider = {
        login: function (params) {
            return __awaiter(this, void 0, void 0, function () {
                var emailPasswordParams, error, oauthParams;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            emailPasswordParams = params;
                            if (!(emailPasswordParams.email && emailPasswordParams.password)) return [3 /*break*/, 2];
                            return [4 /*yield*/, client.auth.signInWithPassword(emailPasswordParams)];
                        case 1:
                            error = (_a.sent()).error;
                            if (error) {
                                throw error;
                            }
                            return [2 /*return*/];
                        case 2:
                            oauthParams = params;
                            if (oauthParams.provider) {
                                client.auth.signInWithOAuth(__assign(__assign({}, oauthParams), { options: { redirectTo: redirectTo } }));
                                // To avoid react-admin to consider this as an immediate success,
                                // we return a rejected promise that is handled by the default OAuth login buttons
                                return [2 /*return*/, Promise.reject()];
                            }
                            return [2 /*return*/, Promise.reject(new Error('Invalid login parameters'))];
                    }
                });
            });
        },
        setPassword: function (_a) {
            var access_token = _a.access_token, refresh_token = _a.refresh_token, password = _a.password;
            return __awaiter(this, void 0, void 0, function () {
                var sessionError, error;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, client.auth.setSession({
                                access_token: access_token,
                                refresh_token: refresh_token,
                            })];
                        case 1:
                            sessionError = (_b.sent()).error;
                            if (sessionError) {
                                throw sessionError;
                            }
                            return [4 /*yield*/, client.auth.updateUser({
                                    password: password,
                                })];
                        case 2:
                            error = (_b.sent()).error;
                            if (error) {
                                throw error;
                            }
                            return [2 /*return*/, undefined];
                    }
                });
            });
        },
        resetPassword: function (params) {
            return __awaiter(this, void 0, void 0, function () {
                var email, options, error;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            email = params.email, options = __rest(params, ["email"]);
                            return [4 /*yield*/, client.auth.resetPasswordForEmail(email, options)];
                        case 1:
                            error = (_a.sent()).error;
                            if (error) {
                                throw error;
                            }
                            return [2 /*return*/, undefined];
                    }
                });
            });
        },
        logout: function () {
            return __awaiter(this, void 0, void 0, function () {
                var error;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, client.auth.signOut()];
                        case 1:
                            error = (_a.sent()).error;
                            if (error) {
                                throw error;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        },
        checkError: function (error) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (error.status === 401 ||
                        error.status === 403 ||
                        // Supabase returns 400 when the session is missing, we need to check this case too.
                        (error.status === 400 &&
                            error.name === 'AuthSessionMissingError')) {
                        return [2 /*return*/, Promise.reject()];
                    }
                    return [2 /*return*/, Promise.resolve()];
                });
            });
        },
        handleCallback: function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, access_token, refresh_token, type;
                return __generator(this, function (_b) {
                    _a = getUrlParams(), access_token = _a.access_token, refresh_token = _a.refresh_token, type = _a.type;
                    // Users have reset their password or have just been invited and must set a new password
                    if (type === 'recovery' || type === 'invite') {
                        if (access_token && refresh_token) {
                            return [2 /*return*/, {
                                    redirectTo: function () { return ({
                                        pathname: redirectTo
                                            ? "".concat(redirectTo, "/set-password")
                                            : '/set-password',
                                        search: "access_token=".concat(access_token, "&refresh_token=").concat(refresh_token, "&type=").concat(type),
                                    }); },
                                }];
                        }
                        if (process.env.NODE_ENV === 'development') {
                            console.error('Missing access_token or refresh_token for an invite or recovery');
                        }
                    }
                    return [2 /*return*/];
                });
            });
        },
        checkAuth: function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, access_token, refresh_token, type, data;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            // Users are on the set-password page, nothing to do
                            if (window.location.pathname === '/set-password' ||
                                window.location.hash.includes('#/set-password')) {
                                return [2 /*return*/];
                            }
                            // Users are on the forgot-password page, nothing to do
                            if (window.location.pathname === '/forgot-password' ||
                                window.location.hash.includes('#/forgot-password')) {
                                return [2 /*return*/];
                            }
                            _a = getUrlParams(), access_token = _a.access_token, refresh_token = _a.refresh_token, type = _a.type;
                            // Users have reset their password or have just been invited and must set a new password
                            if (type === 'recovery' || type === 'invite') {
                                if (access_token && refresh_token) {
                                    // eslint-disable-next-line no-throw-literal
                                    throw {
                                        redirectTo: function () { return ({
                                            pathname: redirectTo
                                                ? "".concat(redirectTo, "/set-password")
                                                : '/set-password',
                                            search: "access_token=".concat(access_token, "&refresh_token=").concat(refresh_token, "&type=").concat(type),
                                        }); },
                                        message: false,
                                    };
                                }
                                if (process.env.NODE_ENV === 'development') {
                                    console.error('Missing access_token or refresh_token for an invite or recovery');
                                }
                            }
                            return [4 /*yield*/, client.auth.getSession()];
                        case 1:
                            data = (_b.sent()).data;
                            if (data.session == null) {
                                return [2 /*return*/, Promise.reject()];
                            }
                            return [2 /*return*/, Promise.resolve()];
                    }
                });
            });
        },
        getPermissions: function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, data, error, permissions;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (window.location.pathname === '/set-password' ||
                                window.location.hash.includes('#/set-password')) {
                                return [2 /*return*/];
                            }
                            // Users are on the forgot-password page, nothing to do
                            if (window.location.pathname === '/forgot-password' ||
                                window.location.hash.includes('#/forgot-password')) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, client.auth.getUser()];
                        case 1:
                            _a = _b.sent(), data = _a.data, error = _a.error;
                            if (error) {
                                throw error;
                            }
                            if (data.user == null) {
                                return [2 /*return*/, undefined];
                            }
                            if (!(typeof getPermissions === 'function')) return [3 /*break*/, 3];
                            return [4 /*yield*/, getPermissions(data.user)];
                        case 2:
                            permissions = _b.sent();
                            return [2 /*return*/, permissions];
                        case 3: return [2 /*return*/, undefined];
                    }
                });
            });
        },
    };
    if (typeof getIdentity === 'function') {
        authProvider.getIdentity = function () { return __awaiter(void 0, void 0, void 0, function () {
            var data, identity;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, client.auth.getUser()];
                    case 1:
                        data = (_a.sent()).data;
                        if (data.user == null) {
                            throw new Error();
                        }
                        return [4 /*yield*/, getIdentity(data.user)];
                    case 2:
                        identity = _a.sent();
                        return [2 /*return*/, identity];
                }
            });
        }); };
    }
    return authProvider;
};
var getUrlParams = function () {
    var searchStr = getSearchString();
    var urlSearchParams = new URLSearchParams(searchStr);
    var access_token = urlSearchParams.get('access_token');
    var refresh_token = urlSearchParams.get('refresh_token');
    var type = urlSearchParams.get('type');
    return { access_token: access_token, refresh_token: refresh_token, type: type };
};
